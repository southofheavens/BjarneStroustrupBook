/*
 * Перестановка - это упорядоченное подмножество некоторого множества. Например, допустим, что вы
 * хотите подобрать код к сейфу. Существует шестьдесят возможных чисел, а вам необходимо выбрать
 * три числа для комбинации. В этом случае существует P(60,3) перестановок, где количество
 * перестановок определяется по формуле P(a,b) = a! / (a-b)!, где символ ! означает факториал.
 * Например, 4! - это 4*3*2*1. Сочетания напоминают перестановки, с тем отличием, что в них
 * порядок следования элементов не имеет значения. Например, если вы делаете слоистое мороженое
 * и хотите использоваь три разных вкуса из пяти, имеющихся в наличии, вам все равно, когда вы
 * используете ванильное мороженое - в начале или в конце, вы просто хотите использовать его.
 * Формула для вычисления количества сочетаний имеет следующий вид: C(a,b) = P(a,b) / b!.
 * Разработайте программу, запрашивающую у пользователя два числа и что  для них необходимо 
 * вычислить (количество перестановок или сочетаний), а также выводящую требуемый результат
 * на экран. Сначала выполните анализ перечисленных требований к программе. Точно 
 * сформулируйте, что именно должна делать программа. Затем переходите к этапу проектирования.
 * Напишите псевдокод программы и разбейте его на части. Программа должна выполнять проверку 
 * ошибок. Убедитесь, что все неправильные входные данные приводят к появлению осмысленных
 * сообщений об ошибках.
 */

#include <iostream>
#include <string>

int64_t Factorial(int number)
{
    if (number < 0) throw std::invalid_argument("Факториал от отрицательного значения не определён!");
    double result = 1;
    for (int i = 1; i <= number; ++i)
    {
        result *= i;
    }
    return result;
}

double Rearrangement(int a, int b)
{
    int64_t numerator = Factorial(a);
    int64_t denominator = Factorial(a - b);
    return (numerator / denominator);
}

double Combination(int a, int b)
{
    int64_t numerator = Rearrangement(a, b);
    int64_t denominator = Factorial(b);
    return (numerator / denominator);
}

int main()
try
{
    int a, b;
    std::cout << "Здравствуйте! Введите два числа a и b: ";
    std::cin >> a >> b;
    if (a < 0 || b < 0) throw std::invalid_argument("Аргументы a и b должны быть >= 0!");
    std::cout << "Теперь введите, что вы хотите вычислить ('Перестановка' или 'Сочетание'): ";
    std::string request;
    std::cin >> request;
    double result;
    request == "Перестановка" ? result = Rearrangement(a, b) : result = Combination(a, b);
    std::cout << "Результат вычисления: " << result << '\n';
    return 0;
}
catch (const std::invalid_argument& e)
{
    std::cout << e.what() << '\n';
    exit(1);
}
