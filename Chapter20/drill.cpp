/*
    1. Определите массив чисел типа int с десятью элементами { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }.
    2. Определите объект класса vector<int> с этими же десятью элементами.
    3. Определите объект класса list<int> с этими же десятью объектами.
    4. Определите второй массив, вектор и список, каждый из которых инициализируется первым массивом,
    вектором или списком соответственно.
    5. Увеличьте значение каждого элемента в массиве на 2; увеличьте значение каждого элемента в массиве
    на 3; увеличьте значение каждого элемента в списке на 5 (тут скорее всего опечатка и на 3 нужно
    увеличить значения в векторе, а не массиве).
    6. Напишите простую операцию copy()
 
    template<typename Iter1, typename Iter2>
    // Требует Input_iterator<Iter1>() и Output_iterator<Iter2>()
    Iter2 copy(Iter1 f1, Iter1 e1, Iter2 f2);
    
    копирующую последовательность [f1,e1) в последовательность [f2,f2+(e1-f1)), и точно так же, как и
    стандартная библиотечная функция копирования, возвращающую итератор f2+(e1-f1). Обратите внимание
    на то, что если f1==e1, то последовательность пуста и копировать нечего.
    7. Используйте вашу функцию copy() для копирования массива в вектор, а списка - в массив.
    8. Используйте стандартную библиотечную функцию find() для того, чтобы убедиться, что вектор содержит
    значение 3, и выведите на экран позицию этого числа в векторе (если оно в нем есть). Используйте
    стандартную библиотечную функцию find(), чтобы убедиться, что список содержит значение 27, и
    выведите на экран позицию этого числа в списке (если оно в нем есть). "Позиция" первого элемента
    равна нулю, позиция второго элемента равна единице и т.д. Если функция find() возвращает итератор,
    установленный на конец последовательности, значит, искомое значение в последовательности не найдено.
*/

#include <iostream>
#include <vector>
#include <list>

constexpr int ARR_SIZE = 10;

template<typename Iter1, typename Iter2>
Iter2 Copy(Iter1 f1, Iter1 e1, Iter2 f2)
{
    while (f1 != e1)
    {
        *f2 = *f1;
        f1++;
        f2++;
    }
    return f2;
}

int main()
{
    int arr[]{0,1,2,3,4,5,6,7,8,9};
    std::vector<int> vec{0,1,2,3,4,5,6,7,8,9};
    std::list<int> lst{0,1,2,3,4,5,6,7,8,9};
    
    // ------------------
    
    int arr2[ARR_SIZE];
    for (int i = 0; i < ARR_SIZE; ++i) {
        arr2[i] = arr[i];
    }
    std::vector<int> vec2{vec};
    std::list<int> lst2{lst};
    
    // ------------------
    
    for (int i = 0; i < ARR_SIZE; ++i) {
        arr[i] += 2;
    }
    for (int i = 0; i < vec.size(); ++i) {
        vec[i] += 3;
    }
    for (auto i = lst.begin(); i != lst.end(); ++i) {
        *i += 5;
    }
    
    // ------------------
    
    for (int i = 0; i < ARR_SIZE; ++i) {
        i != ARR_SIZE - 1 ? std::cout << arr[i] << ' ' : std::cout << arr[i] << '\n';
    }
    for (int i = 0; i < vec.size(); ++i) {
        i != vec.size() - 1 ? std::cout << vec[i] << ' ' : std::cout << arr[i] << '\n';
    }
    for (auto i = lst.begin(); i != lst.end(); ++i) {
        std::cout << *i << ' ';
    }
    std::cout << '\n' << "------------------\n";
    
    // ------------------
    
    Copy(arr,arr+ARR_SIZE,&vec[0]);
    
    for (int i = 0; i < vec.size(); ++i) {
        i != vec.size() - 1 ? std::cout << vec[i] << ' ' : std::cout << arr[i] << '\n';
    }
    
    // ------------------
    
    Copy(lst.begin(),lst.end(),arr);
    
    for (int i = 0; i < ARR_SIZE; ++i) {
        i != ARR_SIZE - 1 ? std::cout << arr[i] << ' ' : std::cout << arr[i] << '\n';
    }
    
    // ------------------
    
    auto it1 = std::find(vec.begin(), vec.end(), 3);
    if (it1 != vec.end()) 
    {
        for (int i = 0; i < vec.size(); ++i)
        {
            if (vec[i] == 3) 
            {
                std::cout << i << '\n';
                break;
            }
        }
    }
    
    auto it2 = std::find(lst.begin(), lst.end(), 27);
    if (it2 != lst.end()) 
    {
        auto it = lst.begin();
        for (int i = 0; i < lst.size(); ++i)
        {
            if (*it == 27)
            {
                std::cout << i << '\n';
                break;
            }
            it++;
            if (it == lst.end()) {
                break;
            }
        }
    }
    
    return 0;
}
