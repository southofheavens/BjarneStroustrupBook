/*
    Вторая часть задания посвящена указателям и их связи с массивами. Используйте функцию print_array() из
    последнего задания.
 
    1. Разместите в динамической памяти переменную типа int, инициализируйте ее значением 7 и присвойте ее
    адрес переменной p1.
    2. Выведите на печать значения указателя p1 и переменной типа int, на которую он указывает.
    3. Разместите в динамической памяти массив, состоящий из семи чисел типа int; инициализируйте его
    значениями 1, 2, 4, 8 и т.д.; присвойте адрес массива переменной p2;
    4. Выведите на печать значение указателя p2 и массив, на который он ссылается.
    5. Объявите указатель типа int* с именем p3 и инициализируйте его значением указателя p2.
    6. Присвойте указатель p1 указателю p2.
    7. Присвойте указатель p3 указателю p2.
    8. Выведите на печать значения указателей p1 и p2, а также то, на что они указывают.
    9. Освободите всю память, которую вы ранее использовали.
    10. Разместите в динамической памяти массив, состоящий из десяти чисел типа int; инициализируйте их
    числами 1, 2, 4, 8 и т.д.; присвойте его адрес указателю p1.
    11. Разместите в динамической памяти массив, состоящий из десяти чисел типа int, присвойте его адрес
    указателю p2.
    12. Скопируйте значения из массива, на который указывает указатель p1, в массив, на который указывает
    указатель p2.
    13. Повторите задания 10-12, используя класс вектор, а не массив.
*/

#include <iostream>
#include <vector>

std::ostream& PrintArray(std::ostream& os, int* a, int n)
{
    for (int i = 0; i < n; ++i)
    {
        os << a[i];
        i != n - 1 ? os << ' ' : os << '\n';
    }
    return os;
}

int main()
{
    int* a = new int(7);
    int* p1 = a;
    std::cout << "Pointer " << p1 << " points to " << *p1 << '\n';
    
    int* arr = new int[7]{1,2,4,8,16,32,64};
    int* p2 = arr;
    std::cout << "Pointer " << p2 << " points to array:\n";
    for (int i = 0; i < 7; ++i)
    {
        std::cout << arr[i];
        i != 6 ? std::cout << ' ' : std::cout << '\n';
    }
    
    int* p3 = p2;
    p2 = p1;
    p3 = p2;
    std::cout << "Pointer " << p1 << " points to " << *p1 << '\n';
    std::cout << "Pointer " << p2 << " points to " << *p2 << '\n';
    
    int* arr2 = new int[10]{1,2,4,8,16,32,64,128,256,512};
    p1 = arr2;
    
    int* arr3 = new int[10];
    p2 = arr3;
    
    for (int i = 0; i < 10; ++i)
    {
        p2[i] = p1[i];
    }
    PrintArray(std::cout, p2, 10);
    
    delete[] arr3;
    delete[] arr2;
    delete[] arr;
    delete a;
    
    std::cout << "----------\n";
    
    // 13.
    std::vector<int> vec1{1,2,4,8,16,32,64,128,256,512};
    p1 = &vec1[0];
    
    std::vector<int> vec2(10);
    p2 = &vec2[0];
    
    for(int i = 0; i < 10; ++i)
    {
        p2[i] = p1[i];
    }
    
    for(int i = 0; i < 10; ++i)
    {
        std::cout << p2[i];
        i != 9 ? std::cout << ' ' : std::cout << '\n';
    }
    
    return 0;
}
